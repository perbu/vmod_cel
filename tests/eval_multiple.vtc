varnishtest "eval_any and eval_all Function Tests"

server s1 {
    rxreq
    txresp
} -start

# Test 1: Empty rule set behavior
varnish v1 -vcl+backend {
    import cel from "${vmod}";

    sub vcl_init {
        cel.init();
    }

    sub vcl_recv {
        # With no rules:
        # - eval_any should return false (nothing matches)
        # - eval_all should return true (vacuous truth)

        if (cel.eval_any()) {
            return (synth(500, "eval_any() should return false with no rules"));
        }

        if (!cel.eval_all()) {
            return (synth(500, "eval_all() should return true with no rules"));
        }

        set req.http.X-Empty-Rules-Test = "passed";
        return (pass);
    }

    sub vcl_deliver {
        if (req.http.X-Empty-Rules-Test) {
            set resp.http.X-Empty-Rules-Test = req.http.X-Empty-Rules-Test;
        }
    }
} -start

client c1 {
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.X-Empty-Rules-Test == "passed"
} -run

# Test 2: With rules loaded from file
varnish v1 -vcl+backend {
    import cel from "${vmod}";

    sub vcl_init {
        cel.init();
        cel.load_file("${testdir}/bundle_example.yaml");
    }

    sub vcl_recv {
        # Test eval_any and eval_all with rules loaded from file
        set req.http.X-Any-Result = cel.eval_any();
        set req.http.X-All-Result = cel.eval_all();

        set req.http.X-Rules-Test = "passed";
        return (pass);
    }

    sub vcl_deliver {
        if (req.http.X-Rules-Test) {
            set resp.http.X-Rules-Test = req.http.X-Rules-Test;
        }
        set resp.http.X-Any-Result = req.http.X-Any-Result;
        set resp.http.X-All-Result = req.http.X-All-Result;
    }
} -start

client c2 {
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.X-Rules-Test == "passed"
    # Results depend on actual rule evaluation
    expect resp.http.X-Any-Result ~ "[01]"
    expect resp.http.X-All-Result ~ "[01]"
} -run

# Test 3: Status and metrics
varnish v1 -vcl+backend {
    import cel from "${vmod}";

    sub vcl_init {
        cel.init();
        cel.load_file("${testdir}/bundle_example.yaml");
    }

    sub vcl_recv {
        # Test status and metrics functions
        set req.http.X-Metrics = cel.metrics_summary();
        set req.http.X-Safety = cel.safety_status();

        # Multiple rule evaluation calls
        set req.http.X-Eval-Any = cel.eval_any();
        set req.http.X-Eval-All = cel.eval_all();

        set req.http.X-Status-Test = "passed";
        return (pass);
    }

    sub vcl_deliver {
        set resp.http.X-Status-Test = req.http.X-Status-Test;
        set resp.http.X-Eval-Any = req.http.X-Eval-Any;
        set resp.http.X-Eval-All = req.http.X-Eval-All;
        set resp.http.X-Metrics = req.http.X-Metrics;
        set resp.http.X-Safety = req.http.X-Safety;
    }
} -start

client c3 {
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.X-Status-Test == "passed"
    # Results should be deterministic
    expect resp.http.X-Eval-Any ~ "[01]"
    expect resp.http.X-Eval-All ~ "[01]"
    # Metrics should contain some data
    expect resp.http.X-Metrics ~ ".*"
    expect resp.http.X-Safety ~ ".*"
} -run