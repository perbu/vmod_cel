name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build matrix for multiple distributions and Varnish versions
  build-matrix:
    name: Build (${{ matrix.os }}, Varnish ${{ matrix.varnish }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'ubuntu-20.04']
        varnish: ['7.4', '7.3', '7.2']
        include:
          # Add RHEL-like builds
          - os: 'almalinux:9'
            varnish: '7.4'
            container: true
          - os: 'almalinux:8'
            varnish: '7.3'
            container: true
          # Add Debian builds
          - os: 'debian:bookworm'
            varnish: '7.4'
            container: true
          - os: 'debian:bullseye'
            varnish: '7.3'
            container: true

    container: ${{ matrix.container && matrix.os || null }}

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        # Install Varnish from packagecloud
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish${{ matrix.varnish }}/script.deb.sh | sudo bash
        sudo apt-get install -y varnish-dev

    - name: Install system dependencies (AlmaLinux)
      if: startsWith(matrix.os, 'almalinux')
      run: |
        dnf update -y
        dnf install -y gcc gcc-c++ make pkgconfig curl
        # Install Varnish from packagecloud
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish${{ matrix.varnish }}/script.rpm.sh | bash
        dnf install -y varnish-devel

    - name: Install system dependencies (Debian)
      if: startsWith(matrix.os, 'debian')
      run: |
        apt-get update
        apt-get install -y build-essential pkg-config curl
        # Install Varnish from packagecloud
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish${{ matrix.varnish }}/script.deb.sh | bash
        apt-get update
        apt-get install -y varnish-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.varnish }}

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libvmod_cel-${{ matrix.os }}-varnish${{ matrix.varnish }}
        path: target/release/libvmod_cel.so

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish74/script.deb.sh | sudo bash
        sudo apt-get install -y varnish-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}

  # Memory safety with miri
  miri:
    name: Miri (Memory Safety)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly with miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Setup miri
      run: cargo miri setup

    - name: Run miri tests
      run: cargo miri test --lib --features benchmarks-only
      env:
        MIRIFLAGS: "-Zmiri-strict-provenance"

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run cargo deny
      run: cargo deny check

  # Varnish integration tests
  varnishtest:
    name: Varnish Integration Tests
    runs-on: ubuntu-latest
    needs: build-matrix
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish74/script.deb.sh | sudo bash
        sudo apt-get install -y varnish varnish-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build VMOD
      run: cargo build --release

    - name: Install VMOD
      run: |
        sudo cp target/release/libvmod_cel.so /usr/lib/varnish/vmods/
        sudo ldconfig

    - name: Run Varnish tests
      run: varnishtest tests/*.vtc

  # Performance benchmarks (non-gating)
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-gating
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        curl -s https://packagecloud.io/install/repositories/varnishcache/varnish74/script.deb.sh | sudo bash
        sudo apt-get install -y varnish-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --features benchmarks-only

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/